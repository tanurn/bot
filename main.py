import json
import os
from typing import Dict, List
import re
import logging
import asyncio
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any, Union

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient
from telethon.tl.types import Message as TgMessage
from telethon.tl.patched import MessageService
from telethon.errors import FloodWaitError, ChannelPrivateError
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv("TELEGRAM_API_ID", "29452772"))
API_HASH = os.getenv("TELEGRAM_API_HASH", "bf975d37f0f1a82f0abbf02170f8bb9d")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8087512664:AAEabKVUKZpjO4DvPxa37TN8YJbIhslwCCg")
PHONE_NUMBER = os.getenv("TELEGRAM_PHONE_NUMBER", '+79872498759')  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
SESSION_NAME = "user_session"
ALLOWED_USER_IDS = [int(x) for x in os.getenv("ALLOWED_USER_IDS", "1288093529,1288093529").split(",")]
SUPPLIER_CHANNELS = [int(channel_id.strip()) for channel_id in os.getenv("SUPPLIER_CHANNELS", "-1002470102452,-1001785205512").split(",") if channel_id.strip()]
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
LOG_FILE = os.getenv("LOG_FILE", "bot_operations.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
PRICE_RULES = {
    "iPhone": {"base_margin": 0.15, "premium_bonus": 0.1},
    "Apple Watch": {"fixed_margin": 5000},
    "MacBook": {"base_margin": 0.12},
    "iPad": {"base_margin": 0.13},
    "AirPods": {"base_margin": 0.14},
    "iMac": {"base_margin": 0.11},
    "Samsung": {"base_margin": 0.08},
    "Xiaomi": {"base_margin": 0.07},
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": {"base_margin": 0.20},
    "default": {"margin": 0.1}
}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
DATA_STORAGE = {
    "telethon_client": None,
    "channel_names": {},  # –ö—ç—à –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
    "users": {}           # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º {user_id: {last_channel, last_message_ids, processed_data}}
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
PARSING_SETTINGS = {
    "remove_emojis": True,
    "replace_flags": True,
    "process_sim_types": True,
    "delivery_icons": {"‚ôªÔ∏è": "–†–µ—Ñ–∞–±—Ä–∏–∫–∞—Ç", "‚åõÔ∏è": "–û–∂–∏–¥–∞–µ—Ç—Å—è"}
}

PRICE_SETTINGS = PRICE_RULES  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞

DATA_SOURCES = SUPPLIER_CHANNELS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_DIR = "settings"
os.makedirs(SETTINGS_DIR, exist_ok=True)
PARSING_SETTINGS_FILE = os.path.join(SETTINGS_DIR, "parsing_settings.json")
PRICE_SETTINGS_FILE = os.path.join(SETTINGS_DIR, "price_settings.json")
DATA_SOURCES_FILE = os.path.join(SETTINGS_DIR, "data_sources.json")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_settings():
    global PARSING_SETTINGS, PRICE_SETTINGS, DATA_SOURCES
    
    try:
        if os.path.exists(PARSING_SETTINGS_FILE):
            with open(PARSING_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                PARSING_SETTINGS = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    
    try:
        if os.path.exists(PRICE_SETTINGS_FILE):
            with open(PRICE_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                PRICE_SETTINGS = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    try:
        if os.path.exists(DATA_SOURCES_FILE):
            with open(DATA_SOURCES_FILE, 'r', encoding='utf-8') as f:
                DATA_SOURCES = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_parsing_settings():
    with open(PARSING_SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(PARSING_SETTINGS, f, ensure_ascii=False, indent=2)

def save_price_settings():
    with open(PRICE_SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(PRICE_SETTINGS, f, ensure_ascii=False, indent=2)

def save_data_sources():
    with open(DATA_SOURCES_FILE, 'w', encoding='utf-8') as f:
        json.dump(DATA_SOURCES, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_settings()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_for_message_ids = State()
    waiting_for_channel_selection = State()
    waiting_for_verification_code = State()
    waiting_for_parsing_settings = State()
    waiting_for_price_category = State()
    waiting_for_price_value = State()
    waiting_for_data_sources = State()
    waiting_for_new_channel = State()

# –£—Ä–æ–≤–Ω–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
class MenuLevel:
    MAIN = "main"
    DATA_PROCESSING = "data_processing"
    SETTINGS = "settings"
    CHANNELS = "channels"

# Middleware –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
class AccessMiddleware:
    async def __call__(self, handler, event: types.Message, data):
        if event.from_user.id not in ALLOWED_USER_IDS:
            await event.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞—à ID –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
            logger.warning(f"Unauthorized access attempt: {event.from_user.id}")
            return
        return await handler(event, data)

# Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
class ThrottlingMiddleware:
    def __init__(self, delay=1.0):
        self.delay = delay
        self.last_processed = {}

    async def __call__(self, handler, event: types.Message, data):
        user_id = event.from_user.id
        current_time = datetime.now().timestamp()
        
        if user_id in self.last_processed:
            elapsed = current_time - self.last_processed[user_id]
            if elapsed < self.delay:
                await event.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                return
                
        self.last_processed[user_id] = current_time
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
router.message.middleware(AccessMiddleware())
router.message.middleware(ThrottlingMiddleware())

# =============================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELETHON –ö–õ–ò–ï–ù–¢–ê
# =============================

async def init_telethon_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞...")
    
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    await client.start(phone=lambda: PHONE_NUMBER)
    
    if not await client.is_user_authorized():
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await request_verification_code()
        return None
    
    logger.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    await refresh_channel_names()
    
    DATA_STORAGE["telethon_client"] = client
    return client

async def shutdown_telethon_client():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
    client = DATA_STORAGE.get("telethon_client")
    if client:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Telethon –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.disconnect()
        logger.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def request_verification_code():
    """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for user_id in ALLOWED_USER_IDS:
        await bot.send_message(
            user_id,
            "üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /code <–≤–∞—à_–∫–æ–¥>"
        )

async def refresh_channel_names():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤"""
    client = DATA_STORAGE.get("telethon_client")
    if not client:
        return
    
    for channel_id in SUPPLIER_CHANNELS:
        try:
            entity = await client.get_entity(channel_id)
            DATA_STORAGE["channel_names"][channel_id] = entity.title
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
            DATA_STORAGE["channel_names"][channel_id] = f"–ö–∞–Ω–∞–ª {channel_id}"

def get_channel_name(channel_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫—ç—à–∞"""
    return DATA_STORAGE["channel_names"].get(channel_id, f"–ö–∞–Ω–∞–ª {channel_id}")

async def fetch_message_from_chat(channel_id: Any, message_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ ID"""
    client = DATA_STORAGE.get("telethon_client")
    if not client:
        logger.error("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await client.get_messages(channel_id, ids=message_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message or isinstance(message, MessageService):
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º")
            return None
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        return message.text
        
    except FloodWaitError as e:
        logger.error(f"–û—à–∏–±–∫–∞ FloodWait: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.seconds + 2)
        return await fetch_message_from_chat(channel_id, message_id)
        
    except ChannelPrivateError:
        logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}")
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
        return None

async def fetch_messages(channel_id: Any, message_ids: List[int]) -> Dict[int, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    results = {}
    for msg_id in message_ids:
        text = await fetch_message_from_chat(channel_id, msg_id)
        if text:
            results[msg_id] = text
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è FloodWait
        await asyncio.sleep(0.5)
    return results

# =============================
# –ö–û–ù–°–¢–†–£–ö–¢–û–†–´ –ö–õ–ê–í–ò–ê–¢–£–†
# =============================

def build_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="get_messages")
    builder.button(text="üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="process_data")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_channels")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ XLSX", callback_data="export_xlsx")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def build_back_button(back_to: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{back_to}")
    return builder.as_markup()

def build_channels_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    builder = InlineKeyboardBuilder()
    for channel_id in SUPPLIER_CHANNELS:
        channel_name = get_channel_name(channel_id)
        builder.button(text=channel_name, callback_data=f"channel_select_{channel_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    return builder.as_markup()

def build_settings_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="parse_settings")
    builder.button(text="üíµ –ü—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", callback_data="price_settings")
    builder.button(text="üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="data_sources")
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏", callback_data="update_dict")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    return builder.as_markup()

# =============================
# –û–ë–†–ê–ë–û–¢–ö–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
# =============================

@router.message(Command("start", "menu"))
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user = message.from_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–π—Å–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.\n\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    await message.answer(welcome_text, reply_markup=build_main_menu())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telethon
    if not DATA_STORAGE.get("telethon_client"):
        await init_telethon_client()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=build_main_menu()
    )
    await callback.answer()

# =============================
# –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ú–ï–ù–Æ
# =============================

@router.callback_query(F.data == "get_messages")
async def get_messages_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not SUPPLIER_CHANNELS:
        await callback.message.answer("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings")
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üì• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
        reply_markup=build_channels_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "process_data")
async def process_data_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "users" not in DATA_STORAGE or user_id not in DATA_STORAGE["users"]:
        await callback.message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'",
            reply_markup=build_back_button(MenuLevel.MAIN)
        )
        await callback.answer()
        return
    
    user_data = DATA_STORAGE["users"][user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if "last_message_ids" not in user_data or not user_data["last_message_ids"]:
        await callback.message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'",
            reply_markup=build_back_button(MenuLevel.MAIN)
        )
        await callback.answer()
        return
        
    if "last_channel" not in user_data:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ",
            reply_markup=build_back_button(MenuLevel.MAIN)
        )
        await callback.answer()
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await process_data_command(callback.message, user_id, user_data)
    await callback.answer()

@router.callback_query(F.data == "list_channels")
async def list_channels_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    await list_channels_command(callback.message)
    await callback.answer()

@router.callback_query(F.data == "export_xlsx")
async def export_xlsx_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ XLSX"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "users" not in DATA_STORAGE or user_id not in DATA_STORAGE["users"]:
        await callback.message.answer(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ",
            reply_markup=build_back_button(MenuLevel.MAIN)
        )
        await callback.answer()
        return
        
    user_data = DATA_STORAGE["users"][user_id]
    
    if "processed_data" not in user_data or not user_data["processed_data"]:
        await callback.message.answer(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ",
            reply_markup=build_back_button(MenuLevel.MAIN)
        )
        await callback.answer()
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    await export_xlsx_command(callback.message, user_id, user_data)
    await callback.answer()

@router.callback_query(F.data == "settings")
async def settings_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
        reply_markup=build_settings_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "update_dict")
async def update_dict_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π"""
    await update_dict_command(callback.message)
    await callback.answer("üîÑ –°–ª–æ–≤–∞—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# =============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ó–í–†–ê–¢–ê –ù–ê–ó–ê–î
# =============================

@router.callback_query(F.data.startswith("back_to_"))
async def back_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    back_to = callback.data.replace("back_to_", "")
    
    if back_to == MenuLevel.MAIN:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu()
        )
    elif back_to == MenuLevel.DATA_PROCESSING:
        await callback.message.edit_text(
            "üì• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
            reply_markup=build_channels_menu()
        )
    elif back_to == MenuLevel.SETTINGS:
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
            reply_markup=build_settings_menu()
        )
    
    await callback.answer()

# =============================
# –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ö–ê–ù–ê–õ–ê –ò –°–û–û–ë–©–ï–ù–ò–ô
# =============================

@router.callback_query(F.data.startswith("channel_select_"))
async def process_channel_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        await callback.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        
        channel_id = int(callback.data.replace("channel_select_", ""))
        await state.update_data(selected_channel=channel_id)
        
        channel_name = get_channel_name(channel_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        await state.update_data(prev_menu_message_id=callback.message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
            f"üì• –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª:",
            reply_markup=build_back_button(MenuLevel.DATA_PROCESSING)
        )
        
        await state.set_state(Form.waiting_for_message_ids)
    except ValueError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞")
    finally:
        await callback.answer()

@router.message(Form.waiting_for_message_ids)
async def process_message_ids(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ ID —Å–æ–æ–±—â–µ–Ω–∏–π
        ids = [int(id_str.strip()) for id_str in re.split(r'[, \n]+', message.text) if id_str.strip().isdigit()]
        
        if not ids:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        state_data = await state.get_data()
        selected_channel = state_data.get("selected_channel")
        
        if not selected_channel:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            await state.clear()
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if "users" not in DATA_STORAGE:
            DATA_STORAGE["users"] = {}
        if user_id not in DATA_STORAGE["users"]:
            DATA_STORAGE["users"][user_id] = {}
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        DATA_STORAGE["users"][user_id]["last_channel"] = selected_channel
        DATA_STORAGE["users"][user_id]["last_message_ids"] = ids
        
        channel_name = get_channel_name(selected_channel)
        await message.answer(
            f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ids)} ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name}. "
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=build_main_menu()  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        logger.info(f"User {user_id} received {len(ids)} message IDs from channel {selected_channel}")
        
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏.")
    finally:
        await state.clear()

# =============================
# –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
# =============================

def parse_supplier_message(text: str) -> Dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    # –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π)
        
    if PARSING_SETTINGS.get("remove_emojis", True):
        cleaned = re.sub(r'[^\w\s.,;:!?@#$%^&*()\-+=\[\]{}<>/\\|‚ôªÔ∏è‚åõÔ∏è]', '', text)
    else:
        cleaned = text

    # –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    category = "other"
    if "iPhone" in cleaned: category = "iPhone"
    elif "MacBook" in cleaned: category = "MacBook"
    elif "Apple Watch" in cleaned: category = "Apple Watch"
    elif "iPad" in cleaned: category = "iPad"
    elif "AirPods" in cleaned: category = "AirPods"
    elif "iMac" in cleaned: category = "iMac"
    elif "Samsung" in cleaned: category = "Samsung"
    elif "Xiaomi" in cleaned: category = "Xiaomi"
    elif "—á–µ—Ö–æ–ª" in cleaned or "–∫–∞–±–µ–ª—å" in cleaned or "–∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ" in cleaned: 
        category = "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_match = re.search(
        r'(iPhone \d+\w*|MacBook \w+|Watch \w+|iPad \w+|AirPods \w+|iMac \w+|Galaxy \w+|Redmi \w+|[–ê-–Ø–∞-—è\w]+ \w+)', 
        cleaned, 
        re.IGNORECASE
    )
    model = model_match.group(0).strip() if model_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
    price_match = re.search(r'(\d{4,6})\b', cleaned)
    price = int(price_match.group(1)) if price_match else 0
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è
    stock_match = re.search(r'(–≤ –Ω–∞–ª–∏—á–∏–∏|–Ω–∞ —Å–∫–ª–∞–¥–µ|–¥–æ—Å—Ç—É–ø–Ω–æ|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):?\s*(\d+)', cleaned, re.IGNORECASE)
    stock = int(stock_match.group(2)) if stock_match else 0
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è iPhone
    if category == "iPhone" and PARSING_SETTINGS.get("replace_flags", True):
        country_flags = {
            "üá∫üá∏": "US", "üá™üá∫": "EU", "üá∑üá∫": "RU", "üá®üá≥": "CH", 
            "üá¨üáß": "UK", "üáØüáµ": "JP", "üá∞üá∑": "KR", "üá≠üá∞": "HK"
        }
        for flag, code in country_flags.items():
            cleaned = cleaned.replace(flag, code)

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
        region_match = re.search(r'\b(US|EU|RU|CH|UK|JP|KR|HK|TW|SG)\b', cleaned)
        region = region_match.group(0) if region_match else "XX"
        model += f" {region}"
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ SIM, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if category == "iPhone" and PARSING_SETTINGS.get("process_sim_types", True):
        cleaned = re.sub(r'(2SIM|DualSIM)', '2SIM', cleaned, flags=re.IGNORECASE)
        cleaned = re.sub(r'(eSIM|SIM\+eSIM)', 'eSIM', cleaned, flags=re.IGNORECASE)

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤–∫–∏
    delivery_icons = {"‚ôªÔ∏è": "–†–µ—Ñ–∞–±—Ä–∏–∫–∞—Ç", "‚åõÔ∏è": "–û–∂–∏–¥–∞–µ—Ç—Å—è"}
    for icon, desc in delivery_icons.items():
        if icon in text:
            model += f" ({desc})"
    
    return {
        "category": category,
        "model": model,
        "price": price,
        "stock": stock,
        "original_text": text,
        "cleaned_text": cleaned
    }

def normalize_data(messages: List[Dict]) -> List[Dict]:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    normalized = []
    seen_models = set()
    
    for msg in messages:
        if not msg: continue
        
        model_key = (msg["category"], msg["model"])
        if model_key in seen_models:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
            for item in normalized:
                if item["category"] == msg["category"] and item["model"] == msg["model"]:
                    item["stock"] += msg["stock"]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    item["original_text"] += f"\n\n---\n\n{msg['original_text']}"
                    break
        else:
            seen_models.add(model_key)
            normalized.append(msg)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ Apple –ø—Ä–æ–¥—É–∫—Ç—ã, –ø–æ—Ç–æ–º –¥—Ä—É–≥–∏–µ
    apple_categories = {"iPhone", "MacBook", "Apple Watch", "iPad", "AirPods", "iMac"}
    apple_items = [item for item in normalized if item["category"] in apple_categories]
    other_items = [item for item in normalized if item["category"] not in apple_categories]
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è Apple –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    def apple_sort_key(x):
        model = x["model"]
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ç–∞
        type_order = {"iPhone": 0, "MacBook": 1, "iPad": 2, "Apple Watch": 3, "AirPods": 4, "iMac": 5}
        type_priority = type_order.get(x["category"], 99)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ iPhone –ø–æ –Ω–æ–º–µ—Ä—É –º–æ–¥–µ–ª–∏ –∏ –æ–±—ä–µ–º—É –ø–∞–º—è—Ç–∏
        if "iPhone" in model:
            model_num = int(re.search(r'iPhone (\d+)', model).group(1)) if re.search(r'iPhone (\d+)', model) else 0
            storage_match = re.search(r'(\d+)GB', model)
            storage = int(storage_match.group(1)) if storage_match else 0
            return (0, model_num, storage, -x["price"])
        
        return (type_priority, model)
    
    apple_items.sort(key=apple_sort_key)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–æ–¥–µ–ª–∏
    other_items.sort(key=lambda x: (x["category"], x["model"]))
    
    return apple_items + other_items

def calculate_prices(data: List[Dict]) -> List[Dict]:
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –Ω–∞—Ü–µ–Ω–∫–∏"""

    global PRICE_SETTINGS

    processed = []
    max_margin_product = {"margin": -1, "index": -1}
    
    for idx, item in enumerate(data):
        category = item["category"]
        base_price = item["price"]
        
        # –ü—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
        if base_price <= 0:
            item["final_price"] = 0
            item["margin"] = 0
            processed.append(item)
            continue
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
         # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        rules = PRICE_SETTINGS.get(category, PRICE_SETTINGS.get("default", {"margin": 0.1}))
        
        if "base_margin" in rules:
            final_price = base_price * (1 + rules["base_margin"])
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–µ–π
            if "premium_bonus" in rules and ("Pro" in item["model"] or "Max" in item["model"]):
                final_price *= (1 + rules["premium_bonus"])
        elif "fixed_margin" in rules:
            final_price = base_price + rules["fixed_margin"]
        else:
            final_price = base_price * 1.1  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ 10%
        
        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Å–æ—Ç–µ–Ω
        final_price = round(final_price / 100) * 100
        margin_value = final_price - base_price
        
        item["final_price"] = final_price
        item["margin"] = margin_value
        
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–æ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Apple
        if category in PRICE_RULES and margin_value > max_margin_product["margin"]:
            max_margin_product = {"margin": margin_value, "index": idx}
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –∫ —Ç–æ–≤–∞—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–æ–π
    if max_margin_product["index"] >= 0:
        data[max_margin_product["index"]]["model"] += " üòä"
    
    return data

# =============================
# –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò
# =============================

def generate_xlsx(data: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XLSX —Ñ–∞–π–ª–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    filename = f"price_export_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
    wb = Workbook()
    ws = wb.active
    ws.title = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ú–æ–¥–µ–ª—å", "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–¶–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ", "–ù–∞–ª–∏—á–∏–µ", "–ú–∞—Ä–∂–∞"]
    ws.append(headers)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
    header_font = Font(bold=True)
    
    for col in range(1, len(headers) + 1):
        cell = ws.cell(row=1, column=col)
        cell.font = header_font
        cell.fill = header_fill
    
    # –î–∞–Ω–Ω—ã–µ
    for item in data:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ (–ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Ç—ã—Å—è—á)
        site_price = item['final_price']
        if site_price > 0:
            site_price_str = f"{site_price // 1000} {str(site_price)[-3:]}"
        else:
            site_price_str = "0"
        
        row = [
            item["category"],
            item["model"],
            item["price"],
            site_price_str,
            item["stock"],
            item.get("margin", 0)
        ]
        ws.append(row)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=4, max_col=4):
        for cell in row:
            if cell.value and cell.value != "0":
                cell.font = Font(bold=True, color="FF0000")
    
    # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    for column in ws.columns:
        max_length = 0
        column_letter = column[0].column_letter
        
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        
        adjusted_width = (max_length + 2) * 1.2
        ws.column_dimensions[column_letter].width = min(adjusted_width, 50)
    
    wb.save(filename)
    return filename

async def delete_file_after_delay(filename: str, delay: int = 120):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    await asyncio.sleep(delay)
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {str(e)}")

# =============================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# =============================

@router.message(Command("code"))
async def process_verification_code(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    code = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    
    if not code or not code.isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /code <–≤–∞—à_–∫–æ–¥>")
        return
    
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    
    try:
        await client.start(phone=lambda: PHONE_NUMBER, code=code)
        
        if await client.is_user_authorized():
            DATA_STORAGE["telethon_client"] = client
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
            logger.info("Telethon client authorized successfully")
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            await refresh_channel_names()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        logger.error(f"Authorization error: {str(e)}")

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat = message.forward_from_chat
    msg_id = message.forward_from_message_id
    
    # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ chat.id –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
    channel_id = chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
    if channel_id not in SUPPLIER_CHANNELS:
        await message.answer(
            f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {get_channel_name(channel_id)} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö. "
            f"–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_id = message.from_user.id
    if "users" not in DATA_STORAGE:
        DATA_STORAGE["users"] = {}
    if user_id not in DATA_STORAGE["users"]:
        DATA_STORAGE["users"][user_id] = {}
        
    DATA_STORAGE["users"][user_id]["last_channel"] = channel_id
    DATA_STORAGE["users"][user_id]["last_message_ids"] = [msg_id]
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="process_now")
    
    await message.answer(
        f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {get_channel_name(channel_id)} –ø–æ–ª—É—á–µ–Ω–æ!\n"
        f"‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_id}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å?",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "process_now")
async def process_now_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"""
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    
    user_id = callback.from_user.id
    if "users" not in DATA_STORAGE or user_id not in DATA_STORAGE["users"]:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
        
    user_data = DATA_STORAGE["users"][user_id]
    await process_data_command(callback.message, user_id, user_data)
    await callback.answer()

async def list_channels_command(message: Message):
    """–§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    if not SUPPLIER_CHANNELS:
        await message.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    await refresh_channel_names()
    
    channel_list = "\n".join([
        f"‚Ä¢ {get_channel_name(channel_id)} (ID: `{channel_id}`)" 
        for channel_id in SUPPLIER_CHANNELS
    ])
    
    await message.answer(
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:</b>\n\n{channel_list}\n\n"
        f"‚ÑπÔ∏è –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPPLIER_CHANNELS",
        reply_markup=build_back_button(MenuLevel.MAIN)
    )

async def update_dict_command(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π"""
    await message.answer("üîÑ –°–ª–æ–≤–∞—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    logger.info("Normalization dictionaries updated by user")

async def process_data_command(message: Message, user_id: int, user_data: dict):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if "last_message_ids" not in user_data or not user_data["last_message_ids"]:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'")
        return
        
    if "last_channel" not in user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
        
    client = DATA_STORAGE.get("telethon_client")
    if not client:
        await message.answer("‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    message_ids = user_data["last_message_ids"]
    channel_id = user_data["last_channel"]
    channel_name = get_channel_name(channel_id)
    
    await message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_name}...")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telethon
        messages = await fetch_messages(channel_id, message_ids)
        
        if not messages:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.")
            return
            
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await message.answer("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        parsed = [parse_supplier_message(text) for text in messages.values()]
        normalized = normalize_data(parsed)
        
        await message.answer("üßÆ –†–∞—Å—á–µ—Ç —Ü–µ–Ω —Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏...")
        processed = calculate_prices(normalized)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        user_data["processed_data"] = processed
        user_data["raw_messages"] = messages
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n\n"
        report += f"üîπ –ö–∞–Ω–∞–ª: {channel_name}\n"
        report += f"üîπ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
        report += f"üîπ –¢–æ–≤–∞—Ä–æ–≤: {len(processed)}\n"
        report += f"üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(set(item['category'] for item in processed))}\n\n"
        report += "‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ XLSX"
        
        await message.answer(report)
        logger.info(f"User {user_id} processed {len(processed)} items from {len(messages)} messages")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        logger.error(f"Data processing error for user {user_id}: {str(e)}", exc_info=True)

async def export_xlsx_command(message: Message, user_id: int, user_data: dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ XLSX —Ñ–∞–π–ª–∞"""
    if "processed_data" not in user_data or not user_data["processed_data"]:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    try:
        await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é XLSX —Ñ–∞–π–ª...")
        filename = generate_xlsx(user_data["processed_data"])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        file = FSInputFile(filename)
        
        await message.answer_document(
            document=file,
            caption=f"üìä –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        logger.info(f"User {user_id} exported XLSX file: {filename}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        asyncio.create_task(delete_file_after_delay(filename, 120))
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        logger.error(f"XLSX export error for user {user_id}: {str(e)}", exc_info=True)

# =============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö
# =============================

@router.callback_query(F.data == "parse_settings")
async def parse_settings_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    for key, value in PARSING_SETTINGS.items():
        if isinstance(value, bool):
            builder.button(
                text=f"{key}: {'‚úÖ' if value else '‚ùå'}",
                callback_data=f"toggle_parse_{key}"
            )
    
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏", callback_data="edit_delivery_icons")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏\n"
        "‚Ä¢ –ó–∞–º–µ–Ω–∞ —Ñ–ª–∞–≥–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ SIM\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∫–æ–Ω–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_parse_"))
async def toggle_parse_setting(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    key = callback.data.replace("toggle_parse_", "")
    
    if key in PARSING_SETTINGS:
        PARSING_SETTINGS[key] = not PARSING_SETTINGS[key]
        save_parsing_settings()
        await parse_settings_handler(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await callback.answer()

@router.callback_query(F.data == "edit_delivery_icons")
async def edit_delivery_icons(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    icons_text = "\n".join([f"{icon} - {desc}" for icon, desc in PARSING_SETTINGS["delivery_icons"].items()])
    
    await callback.message.answer(
        f"üìù –¢–µ–∫—É—â–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:\n{icons_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚ôªÔ∏è=–†–µ—Ñ–∞–±—Ä–∏–∫–∞—Ç\n"
        "‚åõÔ∏è=–û–∂–∏–¥–∞–µ—Ç—Å—è\n"
        "üöö=–î–æ—Å—Ç–∞–≤–∫–∞",
        reply_markup=build_back_button(MenuLevel.SETTINGS)
    )
    await state.set_state(Form.waiting_for_parsing_settings)
    await callback.answer()

@router.message(Form.waiting_for_parsing_settings)
async def process_parsing_settings(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        new_icons = {}
        for line in message.text.split('\n'):
            if '=' in line:
                icon, desc = line.split('=', 1)
                new_icons[icon.strip()] = desc.strip()
        
        PARSING_SETTINGS["delivery_icons"] = new_icons
        save_parsing_settings()
        await message.answer("‚úÖ –ò–∫–æ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data == "price_settings")
async def price_settings_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in PRICE_SETTINGS.keys():
        if category != "default":
            builder.button(text=category, callback_data=f"price_category_{category}")
    
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_price_category")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üíµ <b>–ü—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("price_category_"))
async def edit_price_category(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.replace("price_category_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(price_category=category)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    rules = PRICE_SETTINGS.get(category, {})
    rules_text = "\n".join([f"{key}: {value}" for key, value in rules.items()])
    
    await callback.message.answer(
        f"üìù –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è <b>{category}</b>:\n{rules_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "base_margin=0.15\n"
        "premium_bonus=0.1\n"
        "fixed_margin=5000",
        reply_markup=build_back_button(MenuLevel.SETTINGS)
    )
    await state.set_state(Form.waiting_for_price_value)
    await callback.answer()

@router.message(Form.waiting_for_price_value)
async def process_price_settings(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    try:
        state_data = await state.get_data()
        category = state_data.get("price_category")
        
        if not category:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            await state.clear()
            return
        
        new_rules = {}
        for line in message.text.split('\n'):
            if '=' in line:
                key, value = line.split('=', 1)
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    new_rules[key.strip()] = float(value.strip())
                except ValueError:
                    new_rules[key.strip()] = value.strip()
        
        PRICE_SETTINGS[category] = new_rules
        save_price_settings()
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è <b>{category}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data == "add_price_category")
async def add_price_category(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=build_back_button(MenuLevel.SETTINGS)
    )
    await state.set_state(Form.waiting_for_price_category)
    await callback.answer()

@router.message(Form.waiting_for_price_category)
async def process_new_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = message.text.strip()
        if not category:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        if category not in PRICE_SETTINGS:
            PRICE_SETTINGS[category] = {"base_margin": 0.1}
            save_price_settings()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ÑπÔ∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data == "data_sources")
async def data_sources_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel_id in DATA_SOURCES:
        channel_name = get_channel_name(channel_id)
        builder.button(text=channel_name, callback_data=f"view_channel_{channel_id}")
    
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_data_source")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìÅ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("view_channel_"))
async def view_channel_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞"""
    channel_id = int(callback.data.replace("view_channel_", ""))
    channel_name = get_channel_name(channel_id)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_channel_{channel_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_data_sources")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
        f"‚Ä¢ ID: <code>{channel_id}</code>\n"
        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("remove_channel_"))
async def remove_channel(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    channel_id = int(callback.data.replace("remove_channel_", ""))
    
    if channel_id in DATA_SOURCES:
        DATA_SOURCES.remove(channel_id)
        save_data_sources()
        await callback.answer(f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        await data_sources_handler(callback)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    else:
        await callback.answer("‚ÑπÔ∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")

@router.callback_query(F.data == "add_data_source")
async def add_data_source(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -100123456789):",
        reply_markup=build_back_button(MenuLevel.SETTINGS)
    )
    await state.set_state(Form.waiting_for_new_channel)
    await callback.answer()

@router.message(Form.waiting_for_new_channel)
async def process_new_channel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        channel_id = int(message.text.strip())
        if channel_id not in DATA_SOURCES:
            DATA_SOURCES.append(channel_id)
            save_data_sources()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–∞–∑–≤–∞–Ω–∏–π
            await refresh_channel_names()
            
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª <code>{channel_id}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data == "back_to_data_sources")
async def back_to_data_sources(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    await data_sources_handler(callback)

async def refresh_channel_names():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    client = DATA_STORAGE.get("telethon_client")
    if not client:
        return
    
    for channel_id in DATA_SOURCES:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        try:
            entity = await client.get_entity(channel_id)
            DATA_STORAGE["channel_names"][channel_id] = entity.title
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
            DATA_STORAGE["channel_names"][channel_id] = f"–ö–∞–Ω–∞–ª {channel_id}"

# =============================
# –ó–ê–ü–£–°–ö –ò –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê
# =============================

async def on_startup(dispatcher, bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_telethon_client()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    await refresh_channel_names()
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    scheduler.start()
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dispatcher, bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await shutdown_telethon_client()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("Starting price bot...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())